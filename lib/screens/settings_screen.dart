import 'dart:io';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:image_picker/image_picker.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:my_messenger/screens/login_screen.dart';

class SettingsScreen extends StatefulWidget {
  @override
  _SettingsScreenState createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  final User? currentUser = FirebaseAuth.instance.currentUser;
  final _nameController = TextEditingController();
  final _passwordController = TextEditingController();
  final _newPasswordController = TextEditingController();
  final _imagePicker = ImagePicker();
  File? _imageFile;
  String? _avatarUrl;
  String? _username;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  // üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
  Future<void> _loadUserData() async {
    if (currentUser == null) return;

    DocumentSnapshot userDoc = await FirebaseFirestore.instance.collection('users').doc(currentUser!.uid).get();
    final userData = userDoc.data() as Map<String, dynamic>?; // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É Map

    if (userData != null) {
      setState(() {
        _username = userData['username'] ?? "–ë–µ–∑ –∏–º–µ–Ω–∏";
        _avatarUrl = userData['photoURL'];
        _nameController.text = _username ?? "";
      });
    }
  }

  // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
  Future<void> _updateUsername() async {
    if (currentUser == null) return;

    String newUsername = _nameController.text.trim();
    if (newUsername.isEmpty) return;

    try {
      await FirebaseFirestore.instance.collection('users').doc(currentUser!.uid).update({'username': newUsername});
      setState(() {
        _username = newUsername;
      });
    } catch (e) {
      print("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏: $e");
    }
  }

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  Future<void> _updatePassword() async {
    if (currentUser == null) return;

    String currentPassword = _passwordController.text.trim();
    String newPassword = _newPasswordController.text.trim();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ
    if (currentPassword.isEmpty || newPassword.isEmpty) {
      setState(() {
        _errorMessage = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è";
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    if (currentPassword == newPassword) {
      setState(() {
        _errorMessage = "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ —Ç–µ–∫—É—â–∏–π";
      });
      return;
    }

    try {
      // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –º—ã –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å
      print("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å email: ${currentUser!.email}");

      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–æ–ª–µ–º
      AuthCredential credential = EmailAuthProvider.credential(
        email: currentUser!.email!,
        password: currentPassword,
      );

      // –†–µ—è—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
      await currentUser!.reauthenticateWithCredential(credential);
      print("–†–µ—è—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      await currentUser!.updatePassword(newPassword);
      print("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");

      // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
      _passwordController.clear();
      _newPasswordController.clear();

      // –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è
      setState(() {
        _errorMessage = "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω";
      });
    } catch (e) {
      print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: ${e.toString()}"); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

      setState(() {
        _errorMessage = "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${e.toString()}";
      });
    }
  }

  // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
  Future<void> _updateAvatar() async {
    if (currentUser == null) return;

    try {
      final pickedFile = await _imagePicker.pickImage(source: ImageSource.gallery);
      if (pickedFile == null) return;

      setState(() {
        _imageFile = File(pickedFile.path);
      });

      final ref = FirebaseStorage.instance.ref().child('avatars').child(currentUser!.uid);
      await ref.putFile(_imageFile!, SettableMetadata(contentType: 'image/jpeg'));
      final avatarUrl = await ref.getDownloadURL();

      await FirebaseFirestore.instance.collection('users').doc(currentUser!.uid).update({'photoURL': avatarUrl});
      setState(() {
        _avatarUrl = avatarUrl;
      });
    } catch (e) {
      print("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: $e");
    }
  }

  // üîπ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<void> _signOut() async {
    if (currentUser == null) return;

    await FirebaseAuth.instance.signOut();
    Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => LoginScreen()));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ListView(
          children: [
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
            Center(
              child: GestureDetector(
                onTap: _updateAvatar,
                child: CircleAvatar(
                  radius: 50,
                  backgroundImage: _avatarUrl != null
                      ? NetworkImage(_avatarUrl!)
                      : AssetImage('assets/default_avatar.png') as ImageProvider,
                  child: _imageFile == null ? Icon(Icons.add_a_photo, size: 40, color: Colors.white) : null,
                ),
              ),
            ),
            SizedBox(height: 16),

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
            ListTile(
              title: Text("–ù–∏–∫–Ω–µ–π–º"),
              subtitle: Text(_username ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
              leading: Icon(Icons.account_circle),
            ),
            Divider(),

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
            TextField(
              controller: _nameController,
              decoration: InputDecoration(labelText: "–ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º"),
            ),
            ElevatedButton(
              onPressed: _updateUsername,
              child: Text("–û–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º"),
            ),
            Divider(),

            // –ü–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            TextField(
              controller: _passwordController,
              obscureText: true,
              decoration: InputDecoration(labelText: "–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"),
            ),
            TextField(
              controller: _newPasswordController,
              obscureText: true,
              decoration: InputDecoration(labelText: "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"),
            ),
            ElevatedButton(
              onPressed: _updatePassword,  // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
              child: Text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"),
            ),

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if (_errorMessage != null)
              Text(
                _errorMessage!,
                style: TextStyle(color: Colors.red),
                textAlign: TextAlign.center,
              ),

            Divider(),
            ListTile(
              title: Text("–í—ã–π—Ç–∏"),
              leading: Icon(Icons.exit_to_app),
              onTap: _signOut,
            ),
          ],
        ),
      ),
    );
  }
}