import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../services/auth_service.dart';
import 'package:my_messenger/screens/register_screen.dart';
import 'settings_screen.dart';
import 'package:google_sign_in/google_sign_in.dart';

class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final AuthService _authService = AuthService();
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  bool _isLoading = false;
  String? _errorMessage;

  // üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –Ω–∏–∫–Ω–µ–π–º
  void _signInWithUsername() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    String username = _usernameController.text.trim();
    String password = _passwordController.text.trim();

    if (username.isEmpty || password.isEmpty) {
      setState(() {
        _isLoading = false;
        _errorMessage = "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å";
      });
      return;
    }

    User? user = await _authService.loginWithUsername(username, password);
    if (user == null) {
      setState(() {
        _errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å";
      });
    } else {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => SettingsScreen()),
      );
    }

    setState(() {
      _isLoading = false;
    });
  }

  // üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
  void _signInWithGoogle() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    final user = await _authService.signInWithGoogle();
    if (user == null) {
      setState(() {
        _errorMessage = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google";
      });
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª —á–µ—Ä–µ–∑ Google, –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
      List<UserInfo> providerData = user.providerData;
      bool hasPassword = providerData.any((info) => info.providerId == "password");

      if (!hasPassword) {
        _showSetPasswordDialog(user); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è
      } else {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => SettingsScreen()),
        );
      }
    }

    setState(() {
      _isLoading = false;
    });
  }

  // üîπ –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è
  void _showSetPasswordDialog(User user) {
    TextEditingController passwordController = TextEditingController();
    TextEditingController confirmPasswordController = TextEditingController();
    String? errorText;

    showDialog(
        context: context,
        builder: (context) {
      return StatefulBuilder(
          builder: (context, setState) {
        return AlertDialog(
            title: Text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: passwordController,
                  obscureText: true,
                  decoration: InputDecoration(labelText: "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"),
                ),
                TextField(
                  controller: confirmPasswordController,
                  obscureText: true,
                  decoration: InputDecoration(labelText: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
                ),
                if (errorText != null)
                  Padding(
                    padding: EdgeInsets.only(top: 8),
                    child: Text(errorText!, style: TextStyle(color: Colors.red)),
                  ),
              ],
            ),
            actions: [
            TextButton(
            onPressed: () => Navigator.pop(context),
    child: Text("–û—Ç–º–µ–Ω–∞"),
    ),
    TextButton(
    onPressed: () async {
    String password = passwordController.text.trim();
    String confirmPassword = confirmPasswordController.text.trim();

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ –ø—É—Å—Ç–æ–π
    if (password.isEmpty || confirmPassword.isEmpty) {
      setState(() => errorText = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
      return;
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
    if (password.length < 6) {
      setState(() => errorText = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤");
      return;
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
    if (password != confirmPassword) {
      setState(() => errorText = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      return;
    }

    try {
      // üîπ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google
      final googleProvider = GoogleAuthProvider();
      final reauthResult = await user.reauthenticateWithProvider(googleProvider);

      print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");

      // üîπ –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      await user.updatePassword(password);

      print("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");

      // üîπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
      Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("–ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")),
      );
      await FirebaseAuth.instance.signOut();
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è: $e");
      setState(() => errorText = "–û—à–∏–±–∫–∞: ${e.toString()}");
    }
    },
      child: Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"),
    ),
            ],
        );
          },
      );
        },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("–í—Ö–æ–¥")),
      body: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _usernameController,
              decoration: InputDecoration(labelText: "–ù–∏–∫–Ω–µ–π–º"),
            ),
            SizedBox(height: 10),
            TextField(
              controller: _passwordController,
              obscureText: true,
              decoration: InputDecoration(labelText: "–ü–∞—Ä–æ–ª—å"),
            ),
            SizedBox(height: 10),
            if (_errorMessage != null)
              Text(
                _errorMessage!,
                style: TextStyle(color: Colors.red),
                textAlign: TextAlign.center,
              ),
            SizedBox(height: 20),
            _isLoading
                ? Center(child: CircularProgressIndicator())
                : ElevatedButton(
              onPressed: _signInWithUsername,
              child: Text("–í–æ–π—Ç–∏"),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _signInWithGoogle,
              child: Text("–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google"),
            ),
            SizedBox(height: 10),
            TextButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => RegisterScreen()),
                );
              },
              child: Text("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"),
            ),
          ],
        ),
      ),
    );
  }
}