import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final GoogleSignIn _googleSignIn = GoogleSignIn();  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä GoogleSignIn

  // üîπ –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
  Future<User?> signInWithGoogle() async {
    try {
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
      if (googleUser == null) return null;

      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;
      final AuthCredential credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      final UserCredential userCredential = await _auth.signInWithCredential(credential);
      User? user = userCredential.user;

      if (user != null) {
        var userRef = _firestore.collection('users').doc(user.uid);
        var userDoc = await userRef.get();

        if (!userDoc.exists) {
          await userRef.set({
            'email': user.email,
            'username': user.displayName ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'uid': user.uid,
          });
        }
      }

      return user;
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: $e");
      return null;
    }
  }

  // üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –Ω–∏–∫–Ω–µ–π–º–æ–º
  Future<User?> registerWithEmail(String email, String password, String username) async {
    try {
      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      User? user = userCredential.user;
      if (user != null) {
        await _firestore.collection('users').doc(user.uid).set({
          'email': email,
          'username': username,
          'uid': user.uid,
        });
      }

      return user;
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e");
      return null;
    }
  }

  // üîπ –í—Ö–æ–¥ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
  Future<User?> loginWithUsername(String username, String password) async {
    try {
      // 1. –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
      var userQuery = await _firestore
          .collection('users')
          .where('username', isEqualTo: username)  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ username
          .limit(1)  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ 1 –¥–æ–∫—É–º–µ–Ω—Ç–∞
          .get();

      // 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω
      if (userQuery.docs.isEmpty) {
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return null;
      }

      // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      String email = userQuery.docs.first.get('email');
      String uid = userQuery.docs.first.id;  // –ü–æ–ª—É—á–∞–µ–º UID

      // 4. –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ email –∏ –ø–∞—Ä–æ–ª—å
      UserCredential userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      // 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª
      User? user = userCredential.user;

      if (user != null && user.uid == uid) {
        return user; // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
      } else {
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
        return null;
      }
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $e");
      return null;
    }
  }

  // üîπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  Future<void> changePassword(String newPassword) async {
    try {
      User? user = _auth.currentUser;
      if (user == null) {
        print("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      await user.updatePassword(newPassword);
      print("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: $e");
    }
  }

  // üîπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
  Future<void> changeUsername(String newUsername) async {
    try {
      User? user = _auth.currentUser;
      if (user == null) {
        print("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      await _firestore.collection('users').doc(user.uid).update({
        'username': newUsername,
      });
      print("‚úÖ –ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    } catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∏–∫–Ω–µ–π–º–∞: $e");
    }
  }

  // üîπ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> signOut() async {
    await _googleSignIn.signOut();  // –í—ã—Ö–æ–¥ –∏–∑ Google
    await _auth.signOut();          // –í—ã—Ö–æ–¥ –∏–∑ Firebase
  }
}